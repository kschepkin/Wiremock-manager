#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Wiremock Manager

set -e

COMPOSE_FILE="docker-compose.yml"
SERVICE_NAME="wiremock-manager"

show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  build       - –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞"
    echo "  start       - –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"
    echo "  stop        - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"
    echo "  restart     - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"
    echo "  logs        - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    echo "  status      - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"
    echo "  clean       - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  rebuild     - –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ (clean + build + start)"
    echo "  help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 build      # –°–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑"
    echo "  $0 start      # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
    echo "  $0 logs       # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏"
}

build_image() {
    echo "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    docker-compose -f $COMPOSE_FILE build
    echo "‚úÖ –û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ"
}

start_service() {
    echo "üöÄ –ó–∞–ø—É—Å–∫ Wiremock Manager..."
    docker-compose -f $COMPOSE_FILE up -d
    echo "‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω"
    echo "üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost"
    echo "üîå API Wiremock: http://localhost:8080"
}

stop_service() {
    echo "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞..."
    docker-compose -f $COMPOSE_FILE stop
    echo "‚úÖ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

restart_service() {
    echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞..."
    docker-compose -f $COMPOSE_FILE restart
    echo "‚úÖ –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
}

show_logs() {
    echo "üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞:"
    docker-compose -f $COMPOSE_FILE logs -f $SERVICE_NAME
}

show_status() {
    echo "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:"
    docker-compose -f $COMPOSE_FILE ps
    echo ""
    echo "üè• Healthcheck:"
    docker inspect --format='{{.State.Health.Status}}' wiremock-manager 2>/dev/null || echo "Healthcheck –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
}

clean_all() {
    echo "üßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ–±—Ä–∞–∑–æ–≤..."
    docker-compose -f $COMPOSE_FILE down --rmi local --volumes --remove-orphans
    echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

rebuild_all() {
    echo "üîÑ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞..."
    clean_all
    build_image
    start_service
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è docker –∏ docker-compose
check_requirements() {
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        echo "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ config.json
    if [ ! -f "config.json" ]; then
        echo "‚ö†Ô∏è  –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
        if [ -f "config.json.template" ]; then
            echo "üìã –°–æ–∑–¥–∞—é config.json –∏–∑ —à–∞–±–ª–æ–Ω–∞..."
            cp config.json.template config.json
            echo "‚úÖ config.json —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞"
            echo "üí° –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config.json –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
        else
            echo "‚ùå –®–∞–±–ª–æ–Ω config.json.template –Ω–µ –Ω–∞–π–¥–µ–Ω"
            echo "üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.json —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:"
            echo '{"serverUrl": "http://localhost"}'
            exit 1
        fi
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    check_requirements
    
    case "${1:-help}" in
        build)
            build_image
            ;;
        start)
            start_service
            ;;
        stop)
            stop_service
            ;;
        restart)
            restart_service
            ;;
        logs)
            show_logs
            ;;
        status)
            show_status
            ;;
        clean)
            clean_all
            ;;
        rebuild)
            rebuild_all
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

main "$@"
